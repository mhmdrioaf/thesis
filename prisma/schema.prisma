generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String          @id @default(cuid())
  name        String
  email       String          @unique
  username    String          @unique
  password    String
  dateOfBirth DateTime?
  imageURL    String?
  phoneNumber BigInt?
  addresses   Address[]
  orders      CustomerOrder[]
  sellerOrder SellerOrder[]

  @@unique([username, email], name: "customer_identifier")
}

model Seller {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  username     String        @unique
  password     String
  phoneNumber  BigInt?
  storeAddress String?
  imageURL     String?
  products     Product[]
  orders       SellerOrder[]
  token        String

  @@unique([username, email], name: "seller_identifier")
}

model Administrator {
  id       String  @id @default(cuid())
  name     String
  username String  @unique
  email    String  @unique
  password String
  imageURL String?
  token    String

  @@unique([username, email], name: "admin_identifier")
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  price        Int
  stock        Int
  thumbnail    String?
  images       String[]
  descriptions String?
  sellerId     String?
  seller       Seller?       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  status       ProductStatus @default(SUBMITTED)
  createdAt    DateTime      @default(now())
  approvedAt   DateTime?
  isFeatured   Boolean       @default(false)
}

model Address {
  id                  String    @id @default(cuid())
  label               String
  fullAddress         String
  receiverName        String
  receiverPhoneNumber BigInt
  receiverId          String
  primaryAddressFor   String?
  customer            Customer? @relation(fields: [receiverId], references: [id], onDelete: Cascade)
}

model CustomerOrder {
  id              String       @id @default(cuid())
  customer        Customer     @relation(fields: [customerID], references: [id])
  shippingAddress String
  customerID      String       @unique
  dateOfOrder     DateTime     @default(now())
  status          OrderStatus  @default(PENDING)
  totalPrice      Int
  orderItem       OrderItem[]
  seller          SellerOrder?
  va              String?
}

model OrderItem {
  orderItemID String         @id @default(cuid())
  productID   Int            @unique
  quantity    Int
  order       CustomerOrder? @relation(fields: [orderID], references: [id])
  orderID     String?
  totalPrice  Int
}

model SellerOrder {
  id              String         @id @default(cuid())
  dateOfOrder     DateTime       @default(now())
  seller          Seller         @relation(fields: [sellerID], references: [id])
  order           CustomerOrder? @relation(fields: [customerOrderID], references: [id])
  sellerID        String
  customerOrderID String         @unique
  status          OrderStatus    @default(PENDING)
  Customer        Customer?      @relation(fields: [customerId], references: [id])
  customerId      String?
}

enum ProductStatus {
  SUBMITTED
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  ONHOLD
  PAID
  PACKED
  SHIPPED
  CLOSED
  FAILED
}
